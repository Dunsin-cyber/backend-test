// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @default(uuid())
  email          String  @unique
  password       String
  name           String
  transactionPIN String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  wallet    Wallet?
  donations Donation[]
  received  Donation[] @relation("UserReceivedDonations")

  @@index([email])
}

model Wallet {
  balance Float  @default(0)
  userId  String @id @unique
  user    User   @relation(fields: [userId], references: [id])

  transactionEntries TransactionEntry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Donation {
  id            String       @id @default(uuid())
  amount        Float
  donorId       String
  beneficiaryId String
  donor         User         @relation(fields: [donorId], references: [id])
  beneficiary   User         @relation("UserReceivedDonations", fields: [beneficiaryId], references: [id])
  transaction   Transaction?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([donorId])
  @@index([beneficiaryId])
}

model Transaction {
  id          String          @id @default(uuid())
  type        TransactionType
  reference   String? // e.g. external reference, donationId, airtimeId
  description String?

  entries TransactionEntry[]

  donation   Donation? @relation(fields: [donationId], references: [id])
  donationId String?   @unique

  createdAt DateTime @default(now())
}

model TransactionEntry {
  id            String      @id @default(uuid())
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  walletId String
  wallet   Wallet @relation(fields: [walletId], references: [userId])

  amount        Float // positive for credit, negative for debit
  balanceBefore Float
  balanceAfter  Float

  createdAt DateTime @default(now())

  @@index([transactionId])
  @@index([walletId])
}

enum TransactionType {
  DONATION
  AIRTIME_PURCHASE
  WITHDRAWAL
  DEPOSIT
  TRANSFER
}
